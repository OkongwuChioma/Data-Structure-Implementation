public class SinglyLinkedList<T>
{
    class Node
    {
        public T data { get; set; }
        public Node next { get; set; }
        public Node(T item)
        {
            data = item;
            next = null;
        }
    }

        private Node head;

       private int count;

    public int Add(T item)
    {
        Node newNode = new Node(item);

        if (head == null)
        {
            head = newNode;
        }
        else
        {
            Node current = head;
            while (current.next != null)
            {
                current = current.next;
            }
            current.next = newNode;
        }
        count++;
        return count;
    }
    public bool Remove(T item)
        {
        if (head == null) return false; 

        if (head.data.Equals(item))
        {
            head = head.next; 
            count--;
            return true;
        }

        Node current = head;
        while (current.next != null)
        {
            if (current.next.data.Equals(item))
            {
                current.next = current.next.next; 
                count--;
                return true;
            }
            current = current.next;
        }

        return false; 
    }
    public bool Check(T item)
    {
        Node current = head;
        while (current != null)
        {
            if (current.data.Equals(item))
                return true; 
            current = current.next;
        }
        return false; 
    }

    public int Index(T item)
    {
        Node current = head;
        int index = 0;

        while (current != null)
        {
            if (current.data.Equals(item))
                return index; 
            current = current.next;
            index++;
        }
        return -1; 
    }
    public int Size()
    {
        return count; 
    }
    
}
